import numpy as np
from modules import MP_mesh


file_hr = 'Si_hr.dat'			# file with the real-space Hamiltonian H(R)
hr_type = 'wannier'			# write 'koopmans' if H(R) is taken from a Koopmans calculation, or 'wannier' if H(R) is taken from Wannier90
seedname = 'Si'				# seedname as in Koopmans or Wannier calculation

cutoff = 1.E-3				# cutoff on the calculation of WFs distances
nk1,nk2,nk3 = 2,2,2			# dimensions of the supercell

# INTERPOLATION
interpolation = True			# if True the bands are interpolated along the following k_path, if False the energies are calculated on the MP k-mesh commensurate to the supercell
# PATH X-G-X 20-points
#k_path = np.array(([0.500000,0.000000,0.000000],[0.450000,0.000000,0.000000],[0.400000,0.000000,0.000000],[0.350000,0.000000,0.000000],[0.300000,0.000000,0.000000],[0.250000,0.000000,0.000000],[0.200000,0.000000,0.000000],[0.150000,0.000000,0.000000],[0.100000,0.000000,0.000000],[0.050000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.050000,0.000000,0.000000],[0.100000,0.000000,0.000000],[0.150000,0.000000,0.000000],[0.200000,0.000000,0.000000],[0.250000,0.000000,0.000000],[0.300000,0.000000,0.000000],[0.350000,0.000000,0.000000],[0.400000,0.000000,0.000000],[0.450000,0.000000,0.000000]))
# PATH X-G-X 40-points
#k_path = np.array(([0.000000,0.000000,0.000000],[0.025000,0.000000,0.000000],[0.050000,0.000000,0.000000],[0.075000,0.000000,0.000000],[0.100000,0.000000,0.000000],[0.125000,0.000000,0.000000],[0.150000,0.000000,0.000000],[0.175000,0.000000,0.000000],[0.200000,0.000000,0.000000],[0.225000,0.000000,0.000000],[0.250000,0.000000,0.000000],[0.275000,0.000000,0.000000],[0.300000,0.000000,0.000000],[0.325000,0.000000,0.000000],[0.350000,0.000000,0.000000],[0.375000,0.000000,0.000000],[0.400000,0.000000,0.000000],[0.425000,0.000000,0.000000],[0.450000,0.000000,0.000000],[0.475000,0.000000,0.000000],[0.500000,0.000000,0.000000],[0.475000,0.000000,0.000000],[0.450000,0.000000,0.000000],[0.425000,0.000000,0.000000],[0.400000,0.000000,0.000000],[0.375000,0.000000,0.000000],[0.350000,0.000000,0.000000],[0.325000,0.000000,0.000000],[0.300000,0.000000,0.000000],[0.275000,0.000000,0.000000],[0.250000,0.000000,0.000000],[0.225000,0.000000,0.000000],[0.200000,0.000000,0.000000],[0.175000,0.000000,0.000000],[0.150000,0.000000,0.000000],[0.125000,0.000000,0.000000],[0.100000,0.000000,0.000000],[0.075000,0.000000,0.000000],[0.050000,0.000000,0.000000],[0.025000,0.000000,0.000000]))
# PATH G-X-M-G 13-points
k_path = np.array(((0,0,0),(0.125,0,0),(0.25,0,0),(0.375,0,0),(0.5,0,0),(0.5,0,0.125),(0.5,0,0.25),(0.5,0,0.375),(0.5,0,0.5),(0.375,0,0.375),(0.25,0,0.25),(0.125,0,0.125),(0,0,0)))
# PATH G-X-M-G 51-points
#k_path = np.array(([0.000000,0.000000,0.000000],[0.033333,0.000000,0.000000],[0.066667,0.000000,0.000000],[0.100000,0.000000,0.000000],[0.133333,0.000000,0.000000],[0.166667,0.000000,0.000000],[0.200000,0.000000,0.000000],[0.233333,0.000000,0.000000],[0.266667,0.000000,0.000000],[0.300000,0.000000,0.000000],[0.333333,0.000000,0.000000],[0.366667,0.000000,0.000000],[0.400000,0.000000,0.000000],[0.433333,0.000000,0.000000],[0.466667,0.000000,0.000000],[0.500000,0.000000,0.000000],[0.500000,0.000000,0.033333],[0.500000,0.000000,0.066667],[0.500000,0.000000,0.100000],[0.500000,0.000000,0.133333],[0.500000,0.000000,0.166667],[0.500000,0.000000,0.200000],[0.500000,0.000000,0.233333],[0.500000,0.000000,0.266667],[0.500000,0.000000,0.300000],[0.500000,0.000000,0.333333],[0.500000,0.000000,0.366667],[0.500000,0.000000,0.400000],[0.500000,0.000000,0.433333],[0.500000,0.000000,0.466667],[0.500000,0.000000,0.500000],[0.476190,0.000000,0.476190],[0.452381,0.000000,0.452381],[0.428571,0.000000,0.428571],[0.404762,0.000000,0.404762],[0.380952,0.000000,0.380952],[0.357143,0.000000,0.357143],[0.333333,0.000000,0.333333],[0.309524,0.000000,0.309524],[0.285714,0.000000,0.285714],[0.261905,0.000000,0.261905],[0.238095,0.000000,0.238095],[0.214286,0.000000,0.214286],[0.190476,0.000000,0.190476],[0.166667,0.000000,0.166667],[0.142857,0.000000,0.142857],[0.119048,0.000000,0.119048],[0.095238,0.000000,0.095238],[0.071429,0.000000,0.071429],[0.047619,0.000000,0.047619],[0.023810,0.000000,0.023810]))
# MP_mesh 16x16x16
#k_path = MP_mesh(16,16,16)


# DENSITY OF STATES
DOS = False		# if True it calculates the total density of states.
			# The DOS is calculated over the obtained energies, that is over the k_path (if interpolation is True) or over the original k-mesh (if interpolation is False)
degauss = 0.02		# gaussian broadening for the DOS
nstep = 2000		# sampling of energy interval for the DOS
Emin = -10.		# initial energy (in eV) for the DOS
Emax = 10.		# final energy (in eV) for the DOS

